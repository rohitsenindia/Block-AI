const GeminiHelper = require('./gemini-helper');
const fs = require('fs');
const path = require('path');

class CommitGenerator {
    constructor(geminiApiKey) {
        this.gemini = new GeminiHelper(geminiApiKey);
    }

    async createMeaningfulChange() {
        const files = [
            'src/utils/helpers.js',
            'src/config/settings.js', 
            'docs/usage.md',
            'examples/demo.js',
            'src/features/blockchain.js',
            'docs/api.md',
            'src/utils/logger.js'
        ];
        
        const targetFile = files[Math.floor(Math.random() * files.length)];
        const dir = path.dirname(targetFile);
        
        // Ensure directory exists
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir, { recursive: true });
        }

        const content = await this.generateFileContent(targetFile);
        fs.writeFileSync(targetFile, content);
        
        console.log(`Created/updated: ${targetFile}`);
        return targetFile;
    }

    async generateFileContent(filename) {
        const timestamp = new Date().toISOString();
        
        const baseContent = {
            'src/utils/helpers.js': `// Utility functions for Block AI
// Generated: ${timestamp}
// Auto-generated utility functions

module.exports = {
    formatResponse: (data) => {
        return JSON.stringify(data, null, 2);
    },
    
    validateInput: (input) => {
        return typeof input === 'string' && input.length > 0;
    },
    
    logActivity: (message) => {
        console.log(\`[\${new Date().toISOString()}] \${message}\`);
    },
    
    generateTimestamp: () => {
        return new Date().toISOString();
    }
};`,

            'src/config/settings.js': `// Configuration settings for Block AI
// Updated: ${timestamp}

module.exports = {
    apiSettings: {
        timeout: 30000,
        maxRetries: 3,
        version: '1.0.0'
    },
    
    aiSettings: {
        model: 'gemini-pro',
        temperature: 0.7,
        maxTokens: 1000
    },
    
    blockchainSettings: {
        network: 'mainnet',
        gasLimit: 21000
    }
};`,

            'docs/usage.md': `# Block AI Usage Guide
## Last Updated: ${timestamp}

## Installation
\`\`\`bash
npm install
\`\`\`

## Basic Usage
\`\`\`javascript
const GeminiHelper = require('./src/gemini-helper');
const helper = new GeminiHelper(process.env.GEMINI_API_KEY);
\`\`\`

## Features
- AI-powered code analysis
- Automated documentation
- Blockchain integration helpers
`,

            'examples/demo.js': `// Block AI Demo Script
// Generated: ${timestamp}

const GeminiHelper = require('../src/gemini-helper');
require('dotenv').config();

async function demo() {
    const helper = new GeminiHelper(process.env.GEMINI_API_KEY);
    
    try {
        const response = await helper.generateAIContent(
            "Explain blockchain AI integration in simple terms"
        );
        
        console.log('AI Response:', response);
    } catch (error) {
        console.error('Demo error:', error);
    }
}

// demo(); // Uncomment to run demo
module.exports = { demo };
`,

            'src/features/blockchain.js': `// Blockchain integration features
// Updated: ${timestamp}

class BlockchainHelper {
    constructor() {
        this.network = 'mainnet';
    }
    
    validateAddress(address) {
        return /^0x[a-fA-F0-9]{40}$/.test(address);
    }
    
    formatTransaction(tx) {
        return {
            hash: tx.hash,
            from: tx.from,
            to: tx.to,
            value: tx.value,
            timestamp: new Date().toISOString()
        };
    }
}

module.exports = BlockchainHelper;
`,

            'docs/api.md': `# Block AI API Reference
## Updated: ${timestamp}

## GeminiHelper Class

### constructor(apiKey)
Initialize with Gemini API key.

### generateAIContent(prompt)
Generate AI content from prompt.

### analyzeCode(codeSnippet)
Analyze code and provide insights.
`,

            'src/utils/logger.js': `// Logger utility for Block AI
// Generated: ${timestamp}

class Logger {
    static log(level, message) {
        const timestamp = new Date().toISOString();
        console.log(\`[\${timestamp}] [\${level.toUpperCase()}] \${message}\`);
    }
    
    static info(message) {
        this.log('info', message);
    }
    
    static error(message) {
        this.log('error', message);
    }
    
    static warn(message) {
        this.log('warn', message);
    }
}

module.exports = Logger;
`
        };

        return baseContent[filename] || `// ${filename}\n// Auto-generated: ${timestamp}\n// This file was automatically generated by Block AI automation.\n`;
    }
}

module.exports = CommitGenerator;
